services:
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./user-service:/code  # Sync local development directory with the container
    depends_on:
      - user_db
    ports:
      - "8006:8006"  # Expose container port 8006 to host port 8006
    

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./product-service:/code  # Sync local development directory with the container
    depends_on:
      - product_db
    ports:
      - "8007:8007"  # Expose container port 8007 to host port 8007 

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventory-service:/code  # Sync local development directory with the container
    depends_on:
      - inventory_db
    ports:
      - "8008:8008"  # Expose container port 8008 to host port 8008 

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./order-service:/code  # Sync local development directory with the container
    depends_on:
      - order_db
    ports:
      - "8009:8009"  # Expose container port 8009 to host port 8009 

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./notification-service:/code  # Sync local development directory with the container
    depends_on:
      - notification_db
    ports:
      - "8010:8010"  # Expose container port 8009 to host port 8009 

  user_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: user_db_container
    environment:
      - POSTGRES_USER=saleem
      - POSTGRES_PASSWORD=saleem
      - POSTGRES_DB=user-service-api
    ports:
      - '5433:5432'
    volumes:
      - user_db:/var/lib/postgresql/data
    networks:
      - default 

  product_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: product_db_container
    environment:
      - POSTGRES_USER=saleem
      - POSTGRES_PASSWORD=saleem
      - POSTGRES_DB=product-service-api
    ports:
      - '5434:5432'
    volumes:
      - product_db:/var/lib/postgresql/data
    networks:
      - default

  inventory_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: inventory_db_container
    environment:
      - POSTGRES_USER=saleem
      - POSTGRES_PASSWORD=saleem
      - POSTGRES_DB=inventory-service-api
    ports:
      - '5435:5432'
    volumes:
      - inventory_db:/var/lib/postgresql/data
    networks:
      - default

  order_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: order_db_container
    environment:
      - POSTGRES_USER=saleem
      - POSTGRES_PASSWORD=saleem
      - POSTGRES_DB=order-service-api
    ports:
      - '5436:5432'
    volumes:
      - order_db:/var/lib/postgresql/data
    networks:
      - default

  notification_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: notification_db_container
    environment:
      - POSTGRES_USER=saleem
      - POSTGRES_PASSWORD=saleem
      - POSTGRES_DB=notification-service-api
    ports:
      - '5437:5432'
    volumes:
      - notification_db:/var/lib/postgresql/data
    networks:
      - default
        
  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    networks:
      - default
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    networks:
      - default
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

volumes:
  user_db:
    driver: local
  product_db:
    driver: local
  inventory_db:
    driver: local
  order_db:
    driver: local
  notification_db:
    driver: local
  
networks:
  default:
    driver: bridge
